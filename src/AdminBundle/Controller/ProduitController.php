<?phpnamespace AdminBundle\Controller;use AdminBundle\Entity\Produit;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;use AdminBundle\Entity\CategorieProduit;use Symfony\Component\HttpFoundation\File\File;use Symfony\Component\HttpFoundation\JsonResponse;use AdminBundle\Entity\Logs;/** * Produit controller. * * @Route("produits") */class ProduitController extends Controller{    /**     * Lists all produit entities.     *     * @Route("/", name="produit_index")     * @Method("GET")     */    public function indexAction()    {        $em = $this->getDoctrine()->getManager();        $produits = $em->getRepository('AdminBundle:Produit')->findAll();        return $this->render('AdminBundle:produit:index.html.twig', array(            'produits' => $produits,        ));    }    /**     * Creates a new produit entity.     *     * @Route("/new", name="produit_new")     * @Method({"GET", "POST"})     */    public function newAction(Request $request)    {        $produit = new Produit();        $produit->setUpdatedAt(null);        $user = $this->getUser();        $produit->setAuteur($user->getFirstname()." ".$user->getLastname());        $form = $this->createForm('AdminBundle\Form\ProduitType', $produit);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $em = $this->getDoctrine()->getManager();            $file = $form->get('imageName')->getData();            if($file!=null):                $name = time()."_".$file->getClientOriginalName();                $resultUpload = $file->move($this->getParameter('base_public_dir').'/img/products/', $name) ;                if($resultUpload):                    $produit->setImageName($name);                             endif;            endif;            $em->persist($produit);            $em->flush($produit);            return $this->redirectToRoute('produit_edit', array('id' => $produit->getId(),'action'=>'etape'));        }        return $this->render('AdminBundle:produit:new.html.twig', array(            'produit' => $produit,            'form' => $form->createView(),        ));    }        /**     * Displays a form to edit an existing produit entity.     *     * @Route("/{id}/edit/{action}", name="produit_edit")     * @Method({"GET", "POST"})     */    public function editAction(Request $request, Produit $produit,$action=null)    {               $deleteForm = $this->createDeleteForm($produit);        $imageName=$produit->getImageName();        $em = $this->getDoctrine()->getManager();                if($imageName!==null):            if(!file_exists($this->getParameter('base_public_dir').'/img/products/'.$produit->getImageName())):                $produit->setImageName(null);                $em->persist($produit);                $em->flush();            else:                $f = new File($this->getParameter('base_public_dir').'/img/products/'.$produit->getImageName());                $produit->setImageName($f);            endif;        endif;                $editForm = $this->createForm('AdminBundle\Form\ProduitType', $produit);        $editForm->handleRequest($request);        if ($editForm->isSubmitted() && $editForm->isValid()) {            $file = $editForm->get('imageName')->getData();                       if($file!==null):                $name = time()."_".$file->getClientOriginalName();                $resultUpload = $file->move($this->getParameter('base_public_dir').'/img/products/', $name) ;                if($resultUpload):                    $produit->setImageName($name);                    $em->persist($produit);                    $em->flush($produit);                endif;            else:                $produit->setImageName($imageName);            endif;                        $this->getDoctrine()->getManager()->flush();            return $this->redirectToRoute('produit_edit', array('id' => $produit->getId()));        }        return $this->render('AdminBundle:produit:edit.html.twig', array(            'produit' => $produit,            'action' => $action,            'imageName' => $imageName,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Deletes a produit entity.     *     * @Route("/{id}", name="produit_delete")     * @Method("DELETE")     */    public function deleteAction(Request $request, Produit $produit)    {        $form = $this->createDeleteForm($produit);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $em = $this->getDoctrine()->getManager();            $em->remove($produit);            $em->flush();        }        return $this->redirectToRoute('produit_index');    }    /**     * Creates a form to delete a produit entity.     *     * @param Produit $produit The produit entity     *     * @return \Symfony\Component\Form\Form The form     */    private function createDeleteForm(Produit $produit)    {        return $this->createFormBuilder()            ->setAction($this->generateUrl('produit_delete', array('id' => $produit->getId())))            ->setMethod('DELETE')            ->getForm()        ;    }                /**     * Delete a produit image     * @Route("/deleteImage/{id}", name="image_produit_delete")     * @Method("POST")     */    public function deleteImageAjaxAction($id){        $em = $this->getDoctrine()->getManager();        $p = $em->getRepository(Produit::class)->find($id);        if($p!=null):            $p->setImageName(null);            $em->persist($p);            $em->flush();            return new JsonResponse(array("success"=>true));        else:            return new JsonResponse(array("success"=>false));        endif;            }    /**     * Delete a produit      * @Route("/delete/{id}", name="produit_delete")     * @Method("POST")     */    public function deleteAjaxAction($id){        $em = $this->getDoctrine()->getManager();        $p = $em->getRepository(Produit::class)->find($id);        if($p!=null):            $em->remove($p);            $em->flush();            return new JsonResponse(array("success"=>true));        else:            return new JsonResponse(array("success"=>false));        endif;            }}