<?phpnamespace AdminBundle\Controller;use AdminBundle\Entity\CategorieProduit;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;use AdminBundle\Entity\Logs;/** * Categorieproduit controller. * * @Route("categorie_produit") */class CategorieProduitController extends Controller{    /**     * Lists all categorieProduit entities.     *     * @Route("/", name="categorie_produit_index")     * @Method("GET")     */    public function indexAction()    {        $em = $this->getDoctrine()->getManager();        $categorieProduits = $em->getRepository('AdminBundle:CategorieProduit')->findAll();        return $this->render('AdminBundle:categorieproduit:index.html.twig', array(            'categorieProduits' => $categorieProduits,        ));    }    /**     * Creates a new categorieProduit entity.     *     * @Route("/new", name="categorie_produit_new")     * @Method({"GET", "POST"})     */    public function newAction(Request $request)    {        $user = $this->getUser();        $categorieProduit = new Categorieproduit();        $categorieProduit->setAuteur($user->getFirstname()." ".$user->getLastname());        $form = $this->createForm('AdminBundle\Form\CategorieProduitType', $categorieProduit);        $form->handleRequest($request);                if ($form->isSubmitted() && $form->isValid()) {            $em = $this->getDoctrine()->getManager();            if($categorieProduit->getCategorieProduitParente()==null):                $categorieProduit->setDepth(0);            else:                $categorieProduit->setDepth($categorieProduit->getCategorieProduitParente()->getDepth()+1);            endif;            $em->persist($categorieProduit);            $em->flush();            return $this->redirectToRoute('categorie_produit_index');        }        return $this->render('AdminBundle:categorieproduit:new.html.twig', array(            'categorieProduit' => $categorieProduit,            'form' => $form->createView(),        ));    }    /**     * Finds and displays a categorieProduit entity.     *     * @Route("/{id}", name="categorie_produit_show")     * @Method("GET")     */    public function showAction(CategorieProduit $categorieProduit)    {        $deleteForm = $this->createDeleteForm($categorieProduit);        return $this->render('AdminBundle:categorieproduit:show.html.twig', array(            'categorieProduit' => $categorieProduit,            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Displays a form to edit an existing categorieProduit entity.     *     * @Route("/{id}/edit", name="categorie_produit_edit")     * @Method({"GET", "POST"})     */    public function editAction(Request $request, CategorieProduit $categorieProduit)    {        $deleteForm = $this->createDeleteForm($categorieProduit);        $editForm = $this->createForm('AdminBundle\Form\CategorieProduitType', $categorieProduit);        $editForm->handleRequest($request);        if ($editForm->isSubmitted() && $editForm->isValid()) {            $this->getDoctrine()->getManager()->flush();            return $this->redirectToRoute('categorie_produit_edit', array('id' => $categorieProduit->getId()));        }        return $this->render('AdminBundle:categorieproduit:edit.html.twig', array(            'categorieProduit' => $categorieProduit,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Deletes a categorieProduit entity.     *     * @Route("/{id}", name="categorie_produit_delete")     * @Method("DELETE")     */    public function deleteAction(Request $request, CategorieProduit $categorieProduit)    {        $form = $this->createDeleteForm($categorieProduit);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $em = $this->getDoctrine()->getManager();            $em->remove($categorieProduit);            $em->flush();        }        return $this->redirectToRoute('categorie_produit_index');    }    /**     * Creates a form to delete a categorieProduit entity.     *     * @param CategorieProduit $categorieProduit The categorieProduit entity     *     * @return \Symfony\Component\Form\Form The form     */    private function createDeleteForm(CategorieProduit $categorieProduit)    {        return $this->createFormBuilder()            ->setAction($this->generateUrl('categorie_produit_delete', array('id' => $categorieProduit->getId())))            ->setMethod('DELETE')            ->getForm()        ;    }}